apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app_name: {{ .Release.Name }}
    app_version: {{ .Values.image.tag }}
spec:
  minReadySeconds: {{ .Values.minReadySeconds }}
  replicas: {{ .Values.replicaCount }}
{{- with .Values.strategy }}
  strategy:
{{ toYaml . | indent 4 }}
{{- end }}
  selector:
    matchLabels:
      app_name: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app_name: {{ .Release.Name }}
        app_version: {{ .Values.image.tag }}
{{- with .Values.podLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
{{- if or .Values.podAnnotations .Values.metrics.enabled .Values.configMaps }}
      annotations:
{{- if .Values.configMaps }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
{{- end }}
{{- if .Values.metrics.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ default .Values.container.port .Values.metrics.port | quote }}
        prometheus.io/path: {{ .Values.metrics.path | quote }}
{{- end }}
{{- with .Values.podAnnotations }}
{{ toYaml . | indent 8 }}
{{- end }}
{{- end }}
    spec:
{{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
      affinity:
{{- with .Values.affinity }}
{{ toYaml . | indent 8 }}
{{- end }}
{{- if not .Values.affinity.podAntiAffinity }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app_name
                  operator: In
                  values:
                  - {{ .Release.Name }}
              topologyKey: failure-domain.beta.kubernetes.io/zone
{{- end }}
      {{- if .Values.initContainers }}
      initContainers:
      {{- end }}
      {{- range $cont := .Values.initContainers }}
        {{- $image := printf "%s:%s" $.Values.image.repository $.Values.image.tag }}
        - name: {{ $cont.name }}
          image: {{ default $image $cont.image }}
          imagePullPolicy: {{ default $.Values.image.pullPolicy $cont.imagePullPolicy }}
          {{- if $cont.command }}
          command:
{{ toYaml $cont.command | indent 10 }}
          {{- end }}
          {{- if $cont.args }}
          args:
{{ toYaml $cont.args | indent 10 }}
          {{- end }}
          {{- if or $cont.env $cont.envFromSecret }}
          env:
          {{- range $key, $value := $cont.env }}
          - name: "{{ $key }}"
            value: "{{ $value }}"
          {{- end }}
          {{- range $secret := $cont.envFromSecret }}
          - name: "{{ $secret.name }}"
            valueFrom:
              secretKeyRef:
                name: {{ $secret.secretName }}
                key: {{ $secret.secretKeyRef }}
          {{- end }}
          {{- end }}
      {{- end }}
      containers:
        - name: {{ .Release.Name }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
{{- with .Values.container.command }}
          command:
{{ toYaml . | indent 12 }}
{{- end }}
{{- with .Values.container.args }}
          args:
{{ toYaml . | indent 12 }}
{{- end }}
          {{- if or .Values.env .Values.envFromSecret }}
          env:
          {{- range $key, $value := .Values.env }}
          - name: "{{ $key }}"
            value: "{{ $value }}"
          {{- end }}
          {{- range $secret := .Values.envFromSecret }}
          - name: "{{ $secret.name }}"
            valueFrom:
              secretKeyRef:
                name: {{ $secret.secretName }}
                key: {{ $secret.secretKeyRef }}
          {{- end }}
          {{- end }}
{{- if .Values.livenessProbe }}
          livenessProbe:
{{ toYaml .Values.livenessProbe | indent 12 }}
{{- end }}
{{- if .Values.readinessProbe }}
          readinessProbe:
{{ toYaml .Values.readinessProbe | indent 12 }}
{{- end }}
{{- if .Values.resources }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
{{- end }}
{{- if .Values.volumes.enabled }}
          volumeMounts:
            {{- range $volumeMount := .Values.volumes.volumeMounts }}
            - name: "{{ $volumeMount.name }}"
              mountPath: "{{ $volumeMount.path }}"
              readOnly: {{ default "false" $volumeMount.readOnly }}
            {{- end }}
            {{- range $volumeMount := .Values.volumes.secretVolumeMounts }}
            - name: "{{ $volumeMount.name }}"
              mountPath: "{{ $volumeMount.path }}"
              readOnly: true
            {{- end }}
            {{- range $volumeMount := .Values.volumes.configMapVolumeMounts }}
            - name: "{{ $volumeMount.name }}"
              mountPath: "{{ $volumeMount.path }}"
              subPath: "{{ $volumeMount.subPath }}"
              readOnly: true
            {{- end }}
      volumes:
        {{- if .Values.volumes.volumes }}
{{ toYaml .Values.volumes.volumes | indent 8 }}
        {{- end }}
        {{- range $volume := .Values.volumes.secretVolumes }}
        - name: "{{ $volume.name }}"
          secret:
            secretName: "{{ $volume.secretName }}"
            {{- if $volume.items }}
            items:
              {{- range $item := $volume.items }}
              - key: {{ $item.key }}
                path: {{ $item.path }}
              {{- end }}
            {{- end }}
        {{- end }}
        {{- range $volume := .Values.volumes.configMapVolumes }}
        - name: "{{ $volume.name }}"
          configMap:
            name: "{{ $volume.configMapName }}"
        {{- end }}
{{- end }}
